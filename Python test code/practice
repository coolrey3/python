

#import modules
from tkinter import *
from collections import Counter
import datetime
import xlwt

#current time & date
now = datetime.datetime.now()

#tkinter window
root = Tk()
#tkinter window title
root.title("Programa de Entrada")
#tkinter window size
root.geometry("550x500")


#Entrada Label
entradaLabel = Label(root, text="Entrada")
entradaLabel.grid(row = 2, column = 0, sticky = NSEW,columnspan = 1)

#Total in Label
quantityLabel = Label(root, text="Total In")
quantityLabel.grid(row = 2, column = 2 , sticky = NSEW, columnspan = 1)

#Total Out Label
quantityOutLabel = Label(root, text="Total Out",width=15)
quantityOutLabel.grid(row = 2, column = 9 , sticky = NSEW, columnspan = 1)

#Instructions to scan Label
entry1Label = Label(root, text="Scan Package:")
entry1Label.grid(row = 0, column = 0 , sticky = NSEW)

#Salida Label
salidaLabel = Label(root, text="Salida",width=15)
salidaLabel.grid(row = 2, column = 7 , sticky = NSEW, columnspan = 1)


#save and send buttons
button1 = Button(root,text = 'Save', fg='green')
button2 = Button(root,text = 'Send', fg='red')
#button1.grid(row=3,column=0)
#button2.grid(row = 3 , column = 1)

#Scanner Entry Field
entry1 = Entry(root)
entry1.grid(row = 0,column = 2,columnspan = 3)
entry1.focus_set()

quitButton = Button(root,text="Quit", command = root.quit )
#quitButton.grid(row=1,column=12)



#Define Variables and Arrays
scanIn = []
scanOut = []
startRow = 3
inCount=0
outCount=0


#Menu Taskbar
menu = Menu(root)
root.config(menu=menu)
subMenu = Menu(menu)
fileMenu = Menu(menu)
menu.add_cascade(label="File", menu=fileMenu)
menu.add_cascade(label="Scan Mode", menu=subMenu)


#Menu Taskbar Commands

def file_save():
    f = tkFileDialog.asksaveasfile(mode='w', defaultextension=".txt")
    if f is None: # asksaveasfile return `None` if dialog closed with "cancel".
        return
    text2save = str(text.get(1.0, END)) # starts from `1.0`, not `0.0`
    f.write(text2save)
    f.close() # `()` was missing.


def entradaMode():
    global mode
    print("Entrada Selected")
    mode = "Entrada"
    select = Label(root, text=" Scan mode:   " + mode, fg='green',width = 17)
    select.grid(row=0, columnspan=2, sticky=NSEW)

def salidaMode():
    print("Salida Selected")
    global mode
    global furgonLabel
    mode = "Salida"
    select = Label(root, text="Scan mode: " + mode, fg='red',width = 17)
    select.grid(row=0, columnspan=2, sticky=NSEW)

    # Furgon Entry Field
    furgonLabel = Label(root, text="Furgon: ")
    furgonLabel.grid(row=0, column= 8, sticky=E,columnspan=1)
    furgon = Entry(root)
    furgon.grid(row=0, column=9, columnspan=1,sticky=E)
    #
cursor = root.focus_get
print(cursor)


subMenu.add_command(label="Entrada", command=entradaMode)
subMenu.add_command(label="Salida", command=salidaMode)

fileMenu.add_command(label="Save As",command = file_save)
fileMenu.add_command(label="Exit", command=root.quit)


mode = ""


subMenu.add_separator()

def func(event):


    global inCount
    global outCount
    content = entry1.get()


    if content == "":
        print("No Package Scanned")
        print(mode)

    elif mode == "Entrada":
        print( "Package " + content + " Scanned at " + now.strftime("%m-%d-%Y %H:%M"))
        scanIn.append(content)

        startRowIn = 2
        for i in scanIn:
            inLabel = Label(root, text=i)
            inCount += 1
            inLabel.grid_forget()
            startRowIn = startRowIn + 1



        inLabel.grid(sticky=NSEW, column=0,row=startRowIn)
        global inCounter
        inCounter = Counter(scanIn)
        inCounter = inCounter.most_common()

        startRow = 3
        for value, count in inCounter:
            stored = value, "-" ,count
            counterLabel = Label(root, text = stored)
            counterLabel.grid(column=2,columnspan = 1,row = startRow, sticky = NSEW)
            startRow = startRow + 1
            print(stored)

        entry1.delete(0, 'end')

    else:
        print( "Package " + content + " Scanned at " + now.strftime("%m-%d-%Y %H:%M"))
        scanOut.append(content)

        startRowOut = 2
        for i in scanOut:
            outLabel = Label(root, text=i,width=15)
            outLabel.grid_forget()
            outCount += 1
            startRowOut = startRowOut + 1

        outLabel.grid(sticky=W, column=7,row=startRowOut)

        entry1.delete(0, 'end')



        outCounter = (Counter(scanOut))
        outCounter = outCounter.most_common()

        startRow = 3
        for value, count in outCounter:
            stored = value, "-", count
            counterOutLabel = Label(root, text=stored,width=15)
            counterOutLabel.grid(column=9, columnspan=1, row=startRow, sticky=NSEW)
            startRow = startRow + 1

            if scanIn == scanOut:
                counterOutLabel.config(fg="green")
                furgonLabel.config(fg="green")


        entry1.delete(0, 'end')





    #inCounter = Counter(scanIn)
    #inCounter = inCounter.most_common()
 #   for value, count in inCounter:

  #       print(value, count)


   # totalInLabel = Label(root, text=inCounter)
  #  totalInLabel.grid(row= 3, column = 8)



entradaMode()
root.bind('<Return>', func)



root.mainloop()